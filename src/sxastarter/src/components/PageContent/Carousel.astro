---
import {
  AstroImage,
  Text,
  RichText,
  Link,
  Field,
  ImageField,
  RichTextField,
  LinkField,
  SitecoreContextMap,
} from "@astro-sitecore-jss/astro-sitecore-jss";

import {
  ComponentParams,
  ComponentRendering,
} from "@sitecore-jss/sitecore-jss/layout";

interface Fields {
  Title: Field<string>;
  Text: RichTextField;
  Image: ImageField;
  Link: LinkField;
  Video: ImageField;
}

export type CarouselItemProps = {
  id: string;
  fields: Fields;
};

interface CarouselComponentProps {
  rendering: ComponentRendering & { params: ComponentParams };
  params: ComponentParams;
  fields: {
    items: CarouselItemProps[];
  };
}

const props: CarouselComponentProps = Astro.props.route;
const id = props.params.RenderingIdentifier;
const sitecoreContext = SitecoreContextMap.get()["scContext"];
const isPageEditing = sitecoreContext.pageEditing;
---

<section
  class={`component carousel ${props.params.styles.trimEnd()}`}
  id={id ? id : undefined}
>
  <div class="carousel-inner">
    {
      props.fields.items.map((item, i) => {
        return (
          <div class={'carousel-item ' + (i == 0 ? 'active' : '')}>
            {!isPageEditing && item.fields?.Video?.value?.src ? (
              <video
                class="object-fit-cover d-block w-100 h-100"
                key={item.id}
                autoPlay={true}
                loop={true}
                muted
                playsInline
                poster={item.fields.Image?.value?.src}
              >
                <source src={item.fields.Video.value.src} type="video/webm" />
              </video>
            ) : (
              <AstroImage
                field={item.fields.Image}
                class="object-fit-cover d-block w-100 h-100"
              />
            )}

            <div class="side-content">
              <div class="container">
                <div class="col-lg-5 col-md-6 offset-md-6 offset-lg-7">
                  <h1 class="display-6 fw-bold">
                    <Text field={item.fields.Title} />
                  </h1>
                  <RichText field={item.fields.Text} />
                  {!isPageEditing && item.fields?.Link?.value?.href && (
                    <Link field={item.fields.Link} class="button button-accent" />
                  )}
                </div>
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
  <ol class="carousel-indicators">
    {props.fields.items.map((_item, i) => <li aria-label="Slide" />)}
  </ol>
  <button
    class="carousel-control-prev"
    type="button"
    data-bs-target="#carouselExampleCaptions"
    data-bs-slide="prev"
  >
    <span class="carousel-control-prev-icon" aria-hidden="true">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 16 16"
        fill="currentColor"
      >
        <path
          d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"
        ></path>
      </svg>
    </span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button
    class="carousel-control-next"
    type="button"
    data-bs-target="#carouselExampleCaptions"
    data-bs-slide="next"
  >
    <span class="carousel-control-next-icon" aria-hidden="true">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 16 16"
        fill="currentColor"
      >
        <path
          d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"
        ></path>
      </svg>
    </span>
    <span class="visually-hidden">Next</span>
  </button>
</section>

<script>
  const carousels = document.querySelectorAll(".carousel");

  carousels.forEach((carousel) => {
    setCarousel(carousel);
  });

  function setCarousel(carousel: Element) {
    let index = 0;

    const items = carousel.querySelectorAll(".carousel-item");
    const indicators = carousel.querySelectorAll(".carousel-indicators li");

    setActive();

    const prevButton = carousel.querySelector(".carousel-control-prev");
    const nextButton = carousel.querySelector(".carousel-control-next");
    prevButton?.addEventListener("click", handlePrev);
    nextButton?.addEventListener("click", handleNext);

    indicators.forEach((item, i) =>
      item.addEventListener("click", () => {
        index = i;
        setActive();
      }),
    );

    function setActive() {
      items.forEach((item, i) => item.classList.toggle("active", i === index));
      indicators.forEach((item, i) =>
        item.classList.toggle("active", i === index),
      );
    }

    function handleNext() {
      index = index < items.length - 1 ? index + 1 : 0;
      setActive();
    }

    function handlePrev() {
      index = index > 0 ? index - 1 : items.length - 1;
      setActive();
    }
  }
</script>
